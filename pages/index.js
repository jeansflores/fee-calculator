import Head from 'next/head'
import { Formik, Form, Field, useFormik } from 'formik';
import * as Yup from 'yup';
import { useState } from 'react';

const conditionPay = {
  "Débito": 0,
  "Crédito": 1,
  "2x": 2,
  "3x": 3,
  "4x": 4,
  "5x": 5,
  "6x": 6,
  "7x": 7,
  "8x": 8,
  "9x": 9,
  "10x": 1,
  "11x": 11,
  "12x": 12,
  "13x": 13,
  "14x": 14,
  "15x": 15,
  "16x": 16,
  "17x": 17,
  "18x": 18,
}

const fees = {
  0: 1.009081736,
  1: 1.017293998,
  2: 1.037667324,
  3: 1.04307917,
  4: 1.048437828,
  5: 1.053962901,
  6: 1.059434262,
  7: 1.064849324,
  8: 1.070434596,
  9: 1.075962987,
  10: 1.081548778,
  11: 1.087192868,
  12: 1.092657343,
  13: 1.098418278,
  14: 1.103996467,
  15: 1.109631602,
  16: 1.115324559,
  17: 1.120950566,
  18: 1.126760563,
}

const formSchema = Yup.object().shape({
  saleValue: Yup.string()
    .required('Campo obrigatório.'),
  formOfPayment: Yup.string()
    .required('Campo obrigatório.').nullable(),
});

const initialForm = {
  saleValue: '',
  formOfPayment: null
}

function convertMoneyValue(number) {
  return new new Intl.NumberFormat('id').format(number).toFixed(2);
}

export default function Home() {
  const [resume, setResume] = useState(null)

  const formik = useFormik({
    initialValues: initialForm,
    validationSchema: formSchema,
    onSubmit: ({ saleValue, formOfPayment }) => {
      const currency = new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL',
        minimumFractionDigits: 2
      })

      const castSaleValue = Number(saleValue);
      const castFormOfPayment = Number(formOfPayment);
      const portion = formOfPayment && (saleValue / formOfPayment) || formOfPayment;
      const fee = fees[formOfPayment];
      const newPortion = portion * fee;
      const feePortion = newPortion - portion;
      const newSaleValue = formOfPayment && newPortion * formOfPayment || castSaleValue * fee

      setResume({
        saleValue,
        formOfPayment,
        castFormOfPayment,
        castSaleValue: currency.format(castSaleValue),
        portion: currency.format(portion),
        newPortion: currency.format(newPortion),
        feePortion: currency.format(feePortion),
        newSaleValue: currency.format(newSaleValue),
        fee
      })
    },
  });

  const feeOptions = Object.keys(conditionPay).map((feeKey, index) => {
    return {
      value: Object.values(conditionPay)[index],
      label: feeKey
    }
  })

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex w-full">
        <div className="mx-auto mt-6 p-6 card bg-base-200 max-w-[500px]">
          <div className="form-control">
            <h1 className="mb-2 text-center text-lg font-medium">
              Calculadora para Taxas com PRÓblue
            </h1>
            <form onSubmit={formik.handleSubmit}>
              <div className="form-control mb-4">
                <label className="label">
                  <span className="label-text"><b className="text-red-400">* </b>Valor da venda</span>
                </label>
                <label className="input-group input-group-sm">
                  <span>R$</span>
                  <input
                    type="text"
                    id="saleValue"
                    name="saleValue"
                    className="input w-full"
                    placeholder="Insira o valor da venda"
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                    value={formik.values.saleValue}
                  />
                </label>
                {formik.errors.saleValue && formik.touched.saleValue ? (
                  <label className="label mb-0">
                    <span className="text-red-300">{formik.errors.saleValue}</span>
                  </label>
                ) : null}
              </div>

              <div className="form-control mb-4">
                <label className="label">
                  <span className="label-text"><b className="text-red-400">* </b>Condição do pagamento</span>
                </label>
                <select
                  id="formOfPayment"
                  name="formOfPayment"
                  className="select select-bordered w-full"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.formOfPayment}
                >
                  <option disabled="disabled" value={null} selected="selected">Selecione</option>
                  {feeOptions.map(({ value, label }) => (
                    <option key={label} value={value}>{label}</option>
                  ))}
                </select>
                {formik.errors.formOfPayment && formik.touched.formOfPayment ? (
                  <label className="label mb-0">
                    <span className="text-red-300">{formik.errors.formOfPayment}</span>
                  </label>
                ) : null}
              </div>
              {resume && (
                <div className="p-4 card bg-slate-300 w-full mb-4">
                  <h2 className="text-gray-900 text-center w-full border-b-[1px] pb-2 text-lg font-medium border-gray-900 mb-2">
                    Resumo do Cálculo
                  </h2>
                  <table className="table-auto">
                    <tbody>
                      <tr>
                        <th className="text-gray-900 text-left">Valor da venda</th>
                        <td className="text-gray-900 text-right">R$ {resume.saleValue}</td>
                      </tr>
                      <tr>
                        <th className="text-gray-900 text-left">Condição do pagamento</th>
                        <td className="text-gray-900 text-right">{Object.keys(conditionPay)[resume.castFormOfPayment]}</td>
                      </tr>
                      <tr>
                        <th className="text-gray-900 text-left">Taxas</th>
                        <td className="text-gray-900 text-right">{resume.fee}</td>
                      </tr>
                      {resume.formOfPayment > 0 && (
                        <>
                          <tr>
                            <th className="text-gray-900 text-left">Taxa por Parcela </th>
                            <td className="text-gray-900 text-right">{resume.feePortion}</td>
                          </tr>
                          <tr>
                            <th className="text-gray-900 text-left">Valor da Parcela</th>
                            <td className="text-gray-900 text-right">{resume.portion}</td>
                          </tr>
                          <tr>
                            <th className="text-gray-900 text-left">Valor da Parcela + Taxa</th>
                            <td className="text-gray-900 text-right">{resume.newPortion}</td>
                          </tr>
                        </>
                      )}
                      <tr>
                        <th className="text-gray-900 text-left">Valor da venda + Taxa</th>
                        <td className="text-gray-900 text-right font-bold">{resume.newSaleValue}</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              )}

              <button type="submit" className="w-full btn btn-primary">{resume ? "Recalcular" : "Calcular"}</button>
            </form>
          </div>
        </div>
      </main>
    </div>
  )
}
